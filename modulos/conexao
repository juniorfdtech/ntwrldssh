#!/bin/bash

scor='\033[0m'
cor1='\033[1;37m'
cor2='\033[1;31m'
cor3='\033[1;32m'
cor4='\033[1;36m'
cor5='\033[1;34m'
cor6='\033[1;35m'
cortxt='\033[1;33m'
corbar1='\033[41;1;37m'
corbar2='\033[44;1;37m'

{
	ram1=$(free -h | grep -i mem | awk {'print $2'})
	ram2=$(free -h | grep -i mem | awk {'print $4'})
	ram3=$(free -h | grep -i mem | awk {'print $3'})
	uso=$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')
	system=$(cat /etc/issue.net)
	fun_bar() {
		comando[0]="$1"
		comando[1]="$2"
		(
			[[ -e $HOME/fim ]] && rm $HOME/fim
			[[ ! -d /etc/SSHPlus ]] && rm -rf /bin/menu
			${comando[0]} >/dev/null 2>&1
			${comando[1]} >/dev/null 2>&1
			touch $HOME/fim
		) >/dev/null 2>&1 &
		tput civis
		echo -ne "${cortxt}AGUARDE ${cor1}- ${cortxt}["
		while true; do
			for ((i = 0; i < 18; i++)); do
				echo -ne "${cor2}#"
				sleep 0.1s
			done
			[[ -e $HOME/fim ]] && rm $HOME/fim && break
			echo -e "${cortxt}]"
			sleep 1s
			tput cuu1
			tput dl1
			echo -ne "${cortxt}AGUARDE ${cor1}- ${cortxt}["
		done
		echo -e "${cortxt}]${cor1} -${cor3} OK !${cor1}"
		tput cnorm
	}

	verif_ptrs() {
		porta=$1
		PT=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" | grep -v "COMMAND" | grep "LISTEN")
		for pton in $(echo -e "$PT" | cut -d: -f2 | cut -d' ' -f1 | uniq); do
			svcs=$(echo -e "$PT" | grep -w "$pton" | awk '{print $1}' | uniq)
			[[ "$porta" = "$pton" ]] && {
				echo -e "\n${cor2}PORTA ${cortxt}$porta ${cor2}EM USO PELO ${cor1}$svcs${scor}"
				sleep 3
				fun_conexao
			}
		done
	}

	inst_sqd() {
		if netstat -nltp | grep 'squid' 1>/dev/null 2>/dev/null; then
			echo -e "${corbar1}            REMOVER SQUID PROXY              ${scor}"
			echo ""
			echo -ne "${cor3}REALMENTE DESEJA REMOVER O SQUID ${cor2}? ${cortxt}[s/n]:${cor1} "
			read resp
			[[ "$resp" = 's' ]] && {
				echo -e "\n${cor3}REMOVENDO O SQUID PROXY !${scor}"
				echo ""
				rem_sqd() {
					[[ -d "/etc/squid" ]] && {
						apt-get remove squid -y >/dev/null 2>&1
						apt-get purge squid -y >/dev/null 2>&1
						rm -rf /etc/squid >/dev/null 2>&1
					}
					[[ -d "/etc/squid3" ]] && {
						apt-get remove squid3 -y >/dev/null 2>&1
						apt-get purge squid3 -y >/dev/null 2>&1
						rm -rf /etc/squid3 >/dev/null 2>&1
						apt autoremove -y >/dev/null 2>&1
					}
				}
				fun_bar 'rem_sqd'
				echo -e "\n${cor3}SQUID REMOVIDO COM SUCESSO !${scor}"
				sleep 2
				clear
				fun_conexao
			} || {
				echo -e "\n${cor2}Retornando...${scor}"
				sleep 2
				clear
				fun_conexao
			}
		else
			clear
			echo -e "${corbar2}              INSTALADOR SQUID                ${scor}"
			echo ""
			IP=$(wget -qO- ipv4.icanhazip.com)
			echo -ne "${cor3}PARA CONTINUAR CONFIRME SEU IP: ${cor1}"
			read -e -i $IP ipdovps
			[[ -z "$ipdovps" ]] && {
				echo -e "\n${cor2}IP invalido${cor3}"
				echo ""
				read -p "Digite seu IP: " IP
			}
			echo -e "\n${cortxt}QUAIS PORTAS DESEJA ULTILIZAR NO SQUID ${cor2}?"
			echo -e "\n${cortxt}[${cor2}!${cortxt}] ${cor3}DEFINA AS PORTAS EM SEQUENCIA ${cortxt}EX: ${cor1}80 8080"
			echo ""
			echo -ne "${cor3}INFORME AS PORTAS${cor1}: "
			read portass
			[[ -z "$portass" ]] && {
				echo -e "\n${cor2}Porta invalida!"
				sleep 3
				fun_conexao
			}
			for porta in $(echo -e $portass); do
				verif_ptrs $porta
			done
			[[ $(grep -wc '14' /etc/issue.net) != '0' ]] || [[ $(grep -wc '8' /etc/issue.net) != '0' ]] && {
				echo -e "\n${cor3}INSTALANDO SQUID PROXY${scor}\n"
				fun_bar 'apt update -y' "apt install squid3 -y"
			} || {
				echo -e "\n${cor2}[${cor4}1${cor2}] ${cor1}◉ ${cortxt}SQUID VERSAO 3.3.X\n${cor2}[${cor4}2${cor2}] ${cor1}◉ ${cortxt}SQUID VERSAO 3.5.X${scor}\n"
				read -p "$(echo -e "${cor3}INFORME UMA OPÇÃO ${cor1}: ")" -e -i 1 opc
				[[ -z "$opc" ]] && {
					echo -e "\n${cor2}Opcao invalida!"
					sleep 2
					fun_conexao
				}
				[[ "$opc" != '1' ]] && {
					[[ "$opc" != '2' ]] && {
						echo -e "\n${cor2}Opcao invalida !"
						sleep 2
						fun_conexao
					}
				}
				echo -e "\n${cor3}INSTALANDO SQUID PROXY${scor}\n"
				fun_bar 'apt update -y' "instsqd $opc"
			}
			if [[ -d "/etc/squid/" ]]; then
				var_sqd="/etc/squid/squid.conf"
				var_pay="/etc/squid/payload.txt"
			elif [[ -d "/etc/squid3/" ]]; then
				var_sqd="/etc/squid3/squid.conf"
				var_pay="/etc/squid3/payload.txt"
			else
				echo -e "\n${cortxt}[${cor2}ERRO${cortxt}]${cor1}: ${cortxt}O SQUID PROXY CORROMPEU${scor}"
				sleep 2
				fun_conexao
			fi
			cat <<-EOF >$var_pay
				.whatsapp.net/
				.facebook.net/
				.twitter.com/
				.speedtest.net/
			EOF
			cat <<-EOF >$var_sqd
				acl url1 dstdomain -i 127.0.0.1
				acl url2 dstdomain -i localhost
				acl url3 dstdomain -i $ipdovps
				acl url4 dstdomain -i /SSHPLUS?
				acl payload url_regex -i "$var_pay"
				acl all src 0.0.0.0/0
				http_access allow url1
				http_access allow url2
				http_access allow url3
				http_access allow url4
				http_access allow payload
				http_access deny all
				 
				#Portas
			EOF
			for Pts in $(echo -e $portass); do
				echo -e "http_port $Pts" >>$var_sqd
				[[ -f "/usr/sbin/ufw" ]] && ufw allow $Pts/tcp
			done
			cat <<-EOF >>$var_sqd
				#Nome squid
				visible_hostname SSHPLUS 
				via off
				forwarded_for off
				pipeline_prefetch off
			EOF
			sqd_conf() {
				[[ -d "/etc/squid/" ]] && {
					service ssh restart
					/etc/init.d/squid restart
					service squid restart
				}
				[[ -d "/etc/squid3/" ]] && {
					service ssh restart
					/etc/init.d/squid3 restart
					service squid3 restart
				}
			}
			echo -e "\n${cor3}CONFIGURANDO SQUID PROXY${scor}"
			echo ""
			fun_bar 'sqd_conf'
			echo -e "\n${cor3}SQUID INSTALADO COM SUCESSO!${scor}"
			sleep 2.5s
			fun_conexao
		fi
	}

	addpt_sqd() {
		echo -e "${corbar2}         ADICIONAR PORTA AO SQUID         ${scor}"
		echo -e "\n${cortxt}PORTAS EM USO: ${cor3}$sqdp\n"
		if [[ -f "/etc/squid/squid.conf" ]]; then
			var_sqd="/etc/squid/squid.conf"
		elif [[ -f "/etc/squid3/squid.conf" ]]; then
			var_sqd="/etc/squid3/squid.conf"
		else
			echo -e "\n${cor2}SQUID NAO ESTA INSTALADO!${scor}"
			echo -e "\n${cor2}Retornando...${scor}"
			sleep 2
			clear
			fun_squid
		fi
		echo -ne "${cor3}QUAL PORTA DESEJA ADICIONAR ${cortxt}?${cor1} "
		read pt
		[[ -z "$pt" ]] && {
			echo -e "\n${cor2}Porta invalida!"
			sleep 2
			clear
			fun_conexao
		}
		verif_ptrs $pt
		echo -e "\n${cor3}ADICIONANDO PORTA AO SQUID!"
		echo ""
		sed -i "s/#Portas/#Portas\nhttp_port $pt/g" $var_sqd
		fun_bar 'sleep 2'
		echo -e "\n${cor3}REINICIANDO O SQUID!"
		echo ""
		fun_bar 'service squid restart' 'service squid3 restart'
		echo -e "\n${cor3}PORTA ADICIONADA COM SUCESSO!"
		sleep 3
		clear
		fun_squid
	}

	rempt_sqd() {
		echo -e "${corbar1}        REMOVER PORTA DO SQUID        ${scor}"
		echo -e "\n${cortxt}PORTAS EM USO: ${cor3}$sqdp\n"
		if [[ -f "/etc/squid/squid.conf" ]]; then
			var_sqd="/etc/squid/squid.conf"
		elif [[ -f "/etc/squid3/squid.conf" ]]; then
			var_sqd="/etc/squid3/squid.conf"
		else
			echo -e "\n${cor2}SQUID NAO ESTA INSTALADO!${scor}"
			echo -e "\n${cor2}Retornando...${scor}"
			sleep 2
			clear
			fun_squid
		fi
		echo -ne "${cor3}QUAL PORTA DESEJA REMOVER ${cortxt}?${cor1} "
		read pt
		[[ -z "$pt" ]] && {
			echo -e "\n${cor2}Porta invalida!"
			sleep 2
			clear
			fun_conexao
		}
		if grep -E "$pt" $var_sqd >/dev/null 2>&1; then
			echo -e "\n${cor3}REMOVENDO PORTA DO SQUID!"
			echo ""
			sed -i "/http_port $pt/d" $var_sqd
			fun_bar 'sleep 3'
			echo -e "\n${cor3}REINICIANDO O SQUID!"
			echo ""
			fun_bar 'service squid restart' 'service squid3 restart'
			echo -e "\n${cor3}PORTA REMOVIDA COM SUCESSO!"
			sleep 3.5s
			clear
			fun_squid
		else
			echo -e "\n${cor2}PORTA ${cor3}$pt ${cor2}NAO ENCONTRADA!"
			sleep 3.5s
			clear
			fun_squid
		fi
	}

	fun_squid() {
		[[ "$(netstat -nplt | grep -c 'squid')" = "0" ]] && inst_sqd
		echo -e "${corbar2}          GERENCIAR SQUID PROXY           ${scor}"
		[[ "$(netstat -nplt | grep -c 'squid')" != "0" ]] && {
			sqdp=$(netstat -nplt | grep 'squid' | awk -F ":" {'print $4'} | xargs)
			echo -e "\n${cortxt}PORTAS${cor1}: ${cor3}$sqdp"
			VarSqdOn="REMOVER SQUID PROXY"
		} || {
			VarSqdOn="INSTALAR SQUID PROXY"
		}
		echo -e "\n${cor2}[${cor4}1${cor2}] ${cor1}◉ ${cortxt}$VarSqdOn ${cor2}
[${cor4}2${cor2}] ${cor1}◉ ${cortxt}ADICIONAR PORTA ${cor2}
[${cor4}3${cor2}] ${cor1}◉ ${cortxt}REMOVER PORTA${cor2}
[${cor4}0${cor2}] ${cor1}◉ ${cortxt}VOLTAR${scor}"
		echo ""
		echo -ne "${cor3}OQUE DESEJA FAZER ${cortxt}?${cor2}?${cor1} "
		read x
		clear
		case $x in
		1 | 01)
			inst_sqd
			;;
		2 | 02)
			addpt_sqd
			;;
		3 | 03)
			rempt_sqd
			;;
		0 | 00)
			echo -e "${cor2}Retornando...${scor}"
			sleep 1
			fun_conexao
			;;
		*)
			echo -e "${cor2}Opcao Invalida...${scor}"
			sleep 2
			fun_conexao
			;;
		esac
	}

	fun_drop() {
		if netstat -nltp | grep 'dropbear' 1>/dev/null 2>/dev/null; then
			clear
			[[ $(netstat -nltp | grep -c 'dropbear') != '0' ]] && dpbr=$(netstat -nplt | grep 'dropbear' | awk -F ":" {'print $4'} | xargs) || sqdp="${cor2}INDISPONIVEL"
			if ps x | grep "limiter" | grep -v grep 1>/dev/null 2>/dev/null; then
				stats='${cor3}ON '
			else
				stats='${cor2}OFF '
			fi
			echo -e "${corbar2}              GERENCIAR DROPBEAR               ${scor}"
			echo ""
			echo -e "${cor2}[${cortxt}⚠️${cor2}]${cortxt} ATENÇÃO NÃO DESATIVE O DROPBEAR"
			echo -e "\n${cortxt}PORTAS${cor1}: ${cor3}$dpbr"
			echo ""
			echo -e "${cor2}[${cor4}1${cor2}] ${cor1}◉ ${cortxt}LIMITER DROPBEAR $stats${scor}"
			echo -e "${cor2}[${cor4}2${cor2}] ${cor1}◉ ${cortxt}ALTERAR PORTA DROPBEAR${scor}"
			echo -e "${cor2}[${cor4}3${cor2}] ${cor1}◉ ${cortxt}REMOVER DROPBEAR${scor}"
			echo -e "${cor2}[${cor4}0${cor2}] ${cor1}◉ ${cortxt}VOLTAR${scor}"
			echo ""
			echo -ne "${cor3}OQUE DESEJA FAZER ${cortxt}?${cor1} "
			read resposta
			if [[ "$resposta" = '1' ]]; then
				clear
				if ps x | grep "limiter" | grep -v grep 1>/dev/null 2>/dev/null; then
					echo -e "${cor3}Parando o limiter... ${scor}"
					echo ""
					fun_stplimiter() {
						pidlimiter=$(ps x | grep "limiter" | awk -F "pts" {'print $1'})
						kill -9 $pidlimiter
						screen -wipe
					}
					fun_bar 'fun_stplimiter' 'sleep 2'
					echo -e "\n${cor2} LIMITER DESATIVADO ${scor}"
					sleep 3
					fun_drop
				else
					echo -e "\n${cor3}Iniciando o limiter... ${scor}"
					echo ""
					fun_bar 'screen -d -m -t limiter droplimiter' 'sleep 3'
					echo -e "\n${cor3}  LIMITER ATIVADO ${scor}"
					sleep 3
					fun_drop
				fi
			elif [[ "$resposta" = '2' ]]; then
				echo ""
				echo -ne "${cor3}QUAL PORTA DESEJA ULTILIZAR ${cortxt}?${cor1} "
				read pt
				echo ""
				verif_ptrs $pt
				var1=$(grep 'DROPBEAR_PORT=' /etc/default/dropbear | cut -d'=' -f2)
				echo -e "${cor3}ALTERANDO PORTA DROPBEAR!"
				sed -i "s/\b$var1\b/$pt/g" /etc/default/dropbear >/dev/null 2>&1
				echo ""
				fun_bar 'sleep 2'
				echo -e "\n${cor3}REINICIANDO DROPBEAR!"
				echo ""
				fun_bar 'service dropbear restart' '/etc/init.d/dropbear restart'
				echo -e "\n${cor3}PORTA ALTERADA COM SUCESSO!"
				sleep 3
				clear
				fun_conexao
			elif [[ "$resposta" = '3' ]]; then
				echo -e "\n${cor3}REMOVENDO O DROPBEAR !${scor}"
				echo ""
				fun_dropunistall() {
					service dropbear stop && /etc/init.d/dropbear stop
					apt-get autoremove dropbear -y
					apt-get remove dropbear-run -y
					apt-get remove dropbear -y
					apt-get purge dropbear -y
					rm -rf /etc/default/dropbear
				}
				fun_bar 'fun_dropunistall'
				echo -e "\n${cor3}DROPBEAR REMOVIDO COM SUCESSO !${scor}"
				sleep 3
				clear
				fun_conexao
			elif [[ "$resposta" = '0' ]]; then
				echo -e "\n${cor2}Retornando...${scor}"
				sleep 2
				fun_conexao
			else
				echo -e "\n${cor2}Opcao invalida...${scor}"
				sleep 2
				fun_conexao
			fi
		else
			clear
			echo -e "${corbar2}           INSTALADOR DROPBEAR              ${scor}"
			echo -e "\n${cortxt}VC ESTA PRESTES A INSTALAR O DROPBEAR !${scor}\n"
			echo -ne "${cor3}DESEJA CONTINUAR ${cor2}? ${cortxt}[s/n]:${cor1} "
			read resposta
			[[ "$resposta" = 's' ]] && {
				echo -e "\n${cortxt}DEFINA UMA PORTA PARA O DROPBEAR !${scor}\n"
				echo -ne "${cor3}QUAL A PORTA ${cortxt}?${cor1} "
				read porta
				[[ -z "$porta" ]] && {
					echo -e "\n${cor2}Porta invalida!"
					sleep 3
					clear
					fun_conexao
				}
				verif_ptrs $porta
				echo -e "\n${cor3}INSTALANDO O DROPBEAR ! ${scor}"
				echo ""
				fun_instdrop() {
					apt-get update -y
					apt-get install dropbear -y
				}
				fun_bar 'fun_instdrop'
				fun_ports() {
					sed -i 's/NO_START=1/NO_START=0/g' /etc/default/dropbear >/dev/null 2>&1
					sed -i "s/DROPBEAR_PORT=22/DROPBEAR_PORT=$porta/g" /etc/default/dropbear >/dev/null 2>&1
					sed -i 's/DROPBEAR_EXTRA_ARGS=/DROPBEAR_EXTRA_ARGS="-p 110"/g' /etc/default/dropbear >/dev/null 2>&1
				}
				echo ""
				echo -e "${cor3}CONFIGURANDO PORTA DROPBEAR !${scor}"
				echo ""
				fun_bar 'fun_ports'
				grep -v "^PasswordAuthentication yes" /etc/ssh/sshd_config >/tmp/passlogin && mv /tmp/passlogin /etc/ssh/sshd_config
				echo "PasswordAuthentication yes" >>/etc/ssh/sshd_config
				grep -v "^PermitTunnel yes" /etc/ssh/sshd_config >/tmp/ssh && mv /tmp/ssh /etc/ssh/sshd_config
				echo "PermitTunnel yes" >>/etc/ssh/sshd_config
				echo ""
				echo -e "${cor3}FINALIZANDO INSTALACAO !${scor}"
				echo ""
				fun_ondrop() {
					service dropbear start
					/etc/init.d/dropbear restart
				}
				fun_bar 'fun_ondrop' 'sleep 1'
				echo -e "\n${cor3}INSTALACAO CONCLUIDA ${cortxt}PORTA: ${cor1}$porta${scor}"
				[[ $(grep -c "/bin/false" /etc/shells) = '0' ]] && echo "/bin/false" >>/etc/shells
				sleep 2
				clear
				fun_conexao
			} || {
				echo""
				echo -e "${cor2}Retornando...${scor}"
				sleep 3
				clear
				fun_conexao
			}
		fi
	}
        fun_v2rayins() {
			clear
	        v2rayinst(){
	            source <(curl -sL https://gitlab.com/pre14/prueba/-/raw/main/world/modulos/v2ray)
                    sleep 6
	        }
	        if netstat -tunlp |grep v2ray 1> /dev/null 2> /dev/null; then
	            echo -e "${corbar2}            INSTALADOR V2RAY             ${scor}"
	            echo -e "\n${cortxt}V2RAY JÁ ESTÁ INSTALADO\nDESEJA REINSTALAR? ${scor}\n"
	            echo -ne "${cor3}DESEJA CONTINUAR A REINSTALAÇÃO ? ${cortxt}[s/n]:${scor} "
	            read resp
	            [[ "$resp" != @(s|sim|S|SIM) ]] && {
	                echo -e "\n${cor2}Retornando...${scor}"
	                sleep 2
	                conexao
	            }
	            v2rayinst
	        else
	            echo -e "${corbar2}            INSTALADOR V2RAY             ${scor}"
	            echo -e "\n${cortxt}ESTEJA CIENTE QUE ESSE METODO É INSTAVEL\nFIQUE CIENTE DOS RISCOS ! ${scor}\n"
	            echo -ne "${cor3}DESEJA CONTINUAR A INSTALACAO ? ${cortxt}[s/n]:${scor} "
	            read resp
	            [[ "$resp" != @(s|sim|S|SIM) ]] && {
	                echo -e "\n${cor2}Retornando...${scor}"
	                sleep 2
	                conexao
	            }
	            v2rayinst
            fi
        }
    	fun_chisel() {
		clear
		echo -e "${corbar2}            GERENCIAR CHISEL             ${scor}"
		echo ""


		[[ "$(netstat -tlpn | grep 'docker' | wc -l)" != '0' ]] && {
			sks='${cor3}ON'
			echo -e "${cortxt}PORTAS${cor1}: ${cor3}$(netstat -nplt | grep 'docker' | awk {'print $4'} | cut -d: -f2 | xargs)"
		} || {
			sks='${cor2}OFF'
		}
        [[ "$(netstat -tlpn | grep 'docker' | wc -l)" != '0' ]] && {
				chiselsts="${cor3}ON "
			} || {
				chiselsts="${cor2}OFF "
			}
		echo ""
		echo -e "${cor2}[${cor4}1${cor2}] ${cor1}◉ ${cortxt}ATIVAR CHISEL $chiselsts ${scor}"
		echo -e "${cor2}[${cor4}2${cor2}] ${cor1}◉ ${cortxt}REINICIAR CHISEL${scor}"
		echo -e "${cor2}[${cor4}0${cor2}] ${cor1}◉ ${cortxt}VOLTAR${scor}"
		echo ""
		echo -ne "${cor3}OQUE DESEJA FAZER ${cortxt}?${cor1} "
		read resposta
		if [[ "$resposta" = '1' ]]; then
			if netstat -nltp | grep 'docker' 1>/dev/null 2>/dev/null; then
				clear
				echo -e "${corbar2}             CHISEL              ${scor}"
				echo ""
				fun_chiseloff() {
					docker stop chisel
                    docker rm chisel
					docker.io stop chisel
                    docker.io rm chisel

				}
				echo -e "${cor3}DESATIVANDO CHISEL${cortxt}"
				echo ""
				fun_bar 'fun_chiseloff'
				echo ""
				echo -e "${cor3}CHISEL DESATIVADO COM SUCESSO!${cortxt}"
				sleep 3
				fun_chisel
			else
                clear
                fun_installdocker() {
                    _pacotes=("docker" "docker.io")
                    for _prog in ${_pacotes[@]}; do
                    apt install $_prog -y
                    done
                }
                echo -e "\n${cortxt}ESTEJA CIENTE QUE ESSE METODO É INSTAVEL\nPODE OU NÃO FUNCIONAR NA SUA MAQUINA\nFIQUE CIENTE DOS RISCOS ! ${scor}\n"
                echo -ne "${cor3}DESEJA CONTINUAR A INSTALACAO ? ${cortxt}[s/n]:${scor} "
                read resp
                [[ "$resp" != @(s|sim|S|SIM) ]] && {
                    echo -e "\n${cor2}Retornando...${scor}"
                    sleep 2
                    conexao
                }
                echo -e "\n${cor3}Suportado Ubuntu 16+${scor}"
                echo -e "\n${cor3}INSTALANDO O CHISEL !${scor}"
				echo ""
				fun_bar 'fun_installdocker'
				clear
				echo -e "${corbar2}             CHISEL              ${scor}"
				echo ""
				echo -ne "${cor3}QUAL PORTA DESEJA ULTILIZAR ${cortxt}?${cor1}: "
				read porta
				[[ -z "$porta" ]] && {
					echo ""
					echo -e "${cor2}Porta invalida!"
					sleep 3
					clear
					fun_chisel
				}
				verif_ptrs $porta
                clear
                echo -ne "${cor3}Nome do usuário:${cor1} ";read username
                [[ -z $username ]] && {
                    echo -e "\n${corbar1}Nome de usuário vazio ou invalido!${scor}\n"
                    fun_chisel
                }
                [[ ${username} != ?(+|-)+([a-zA-Z0-9]) ]] && {
                    echo -e "\n${corbar1}Você digitou um nome de usuário inválido!${scor}"
                    echo -e "${corbar1}Não use espaços, acentos ou caracteres especiais!${scor}\n"
                    fun_chisel
                }
                sizemin=$(echo ${#username})
                [[ $sizemin -lt 2 ]] && {
                    echo -e "\n${corbar1}Você digitou um nome de usuário muito curto${scor}"
                    echo -e "${corbar1}use no mínimo dois caracteres!${scor}\n"
                    fun_chisel
                }
                sizemax=$(echo ${#username})
                [[ $sizemax -gt 10 ]] && {
                    echo -e "\n${corbar1}Você digitou um nome de usuário muito grande"
                    echo -e "${corbar1}use no máximo 10 caracteres!${scor}\n"
                    fun_chisel
                }
                echo -ne "${cor3}Senha:${cor1} ";read password
                [[ -z $password ]] && {
                    echo -e "\n${corbar1}Senha vazia ou invalida!${scor}\n"
                    fun_chisel 
                }
                sizepass=$(echo ${#password})
                [[ $sizepass -lt 4 ]] && {
                    echo -e "\n${corbar1}Senha curta!, use no mínimo 4 caracteres${scor}\n"
                    fun_chisel        
                }
                echo -e "\n${cor3}CONFIGURANDO CHISEL !${scor}"
				echo ""
                fun_inichisel() {
                    docker run --name chisel -p $porta:$porta -d --restart always jpillora/chisel server -p $porta --socks5 --key supersecret --auth "$username:$password"
                    docker.io run --name chisel -p $porta:$porta -d --restart always jpillora/chisel server -p $porta --socks5 --key supersecret --auth "$username:$password"
                }
                fun_bar 'fun_inichisel'
                clear
                echo -e "\n${cor3}CHISEL INSTALADO COM SUCESSO !${cor2} PORTA: ${cortxt}${porta}${scor}"
				sleep 3
				clear
				fun_chisel
            fi
        elif [[ "$resposta" = '2' ]]; then
            clear
            echo -e "\n${cor3}REINICIANDO CHISEL !${cortxt}"
			echo ""
            fun_attchisel() {
                docker restart chisel
                docker.io restart chisel
            }
            fun_attchisel
            clear
            echo -e "\n${cor3}CHISEL REINICIANDO COM SUCESSO !${cortxt}"
            sleep 1
            fun_chisel
        elif [[ "$resposta" = '0' ]]; then
			echo ""
			echo -e "${cor2}Retornando...${scor}"
			sleep 1
			fun_conexao
		else
			echo ""
			echo -e "${cor2}Opcao invalida !${scor}"
			sleep 1
			fun_socks
		fi
    }
	inst_ssl() {
		if netstat -nltp | grep 'stunnel4' 1>/dev/null 2>/dev/null; then
			[[ $(netstat -nltp | grep 'stunnel4' | wc -l) != '0' ]] && sslt=$(netstat -nplt | grep stunnel4 | awk {'print $4'} | awk -F ":" {'print $2'} | xargs) || sslt="${cor2}INDISPONIVEL"
			echo -e "${corbar2}              GERENCIAR SSL TUNNEL               ${scor}"
			echo -e "\n${cortxt}PORTAS${cor1}: ${cor3}$sslt"
			echo ""
			echo -e "${cor2}[${cor4}1${cor2}] ${cor1}◉ ${cortxt}ALTERAR PORTA SSL TUNNEL${scor}"
			echo -e "${cor2}[${cor4}2${cor2}] ${cor1}◉ ${cortxt}REMOVER SSL TUNNEL${scor}"
			echo -e "${cor2}[${cor4}0${cor2}] ${cor1}◉ ${cortxt}VOLTAR${scor}"
			echo ""
			echo -ne "${cor3}OQUE DESEJA FAZER ${cortxt}?${cor1} "
			read resposta
			echo ""
			[[ "$resposta" = '1' ]] && {
				echo -ne "${cor3}QUAL PORTA DESEJA ULTILIZAR ${cortxt}?${cor1} "
				read porta
				echo ""
				[[ -z "$porta" ]] && {
					echo ""
					echo -e "${cor2}Porta invalida!"
					sleep 2
					clear
					fun_conexao
				}
				verif_ptrs $porta
				echo -e "${cor3}ALTERANDO PORTA SSL TUNNEL!"
				var2=$(grep 'accept' /etc/stunnel/stunnel.conf | awk '{print $NF}')
				sed -i "s/\b$var2\b/$porta/g" /etc/stunnel/stunnel.conf >/dev/null 2>&1
				echo ""
				fun_bar 'sleep 2'
				echo ""
				echo -e "${cor3}REINICIANDO SSL TUNNEL!\n"
				fun_bar 'service stunnel4 restart' '/etc/init.d/stunnel4 restart'
				echo ""
				netstat -nltp | grep 'stunnel4' >/dev/null && echo -e "${cor3}PORTA ALTERADA COM SUCESSO !" || echo -e "${cor2}ERRO INESPERADO!"
				sleep 3.5s
				clear
				fun_conexao
			}
			[[ "$resposta" = '2' ]] && {
				echo -e "${cor3}REMOVENDO O  SSL TUNNEL !${scor}"
				del_ssl() {
					service stunnel4 stop
					apt-get remove stunnel4 -y
					apt-get autoremove stunnel4 -y
					apt-get purge stunnel4 -y
					rm -rf /etc/stunnel/stunnel.conf
					rm -rf /etc/default/stunnel4
					rm -rf /etc/stunnel/stunnel.pem
				}
				echo ""
				fun_bar 'del_ssl'
				echo ""
				echo -e "${cor3}SSL TUNNEL REMOVIDO COM SUCESSO!${scor}"
				sleep 3
				fun_conexao
			} || {
				echo -e "${cor2}Retornando...${scor}"
				sleep 3
				fun_conexao
			}
		else
			clear
			echo -e "${corbar2}              INSTALAR SSL TUNNEL               ${scor}"
			echo ""
			echo -e "${cor2}[${cor4}1${cor2}] ${cor1}◉ ${cortxt}INSTALAR SSL TUNNEL PADRÃO${scor}"
			echo -e "${cor2}[${cor4}2${cor2}] ${cor1}◉ ${cortxt}INSTALAR SSL TUNNEL WEBSOCKET${scor}"
			echo -e "${cor2}[${cor4}0${cor2}] ${cor1}◉ ${cortxt}VOLTAR${scor}"
			echo ""
			echo -ne "${cor3}OQUE DESEJA FAZER ${cortxt}?${cor1} "
			read resposta
			echo ""
            if [[ "$resposta" = '1' ]]; then
                portssl='22'
            elif [[ "$resposta" = '2' ]]; then     
                portssl='80'
            elif [[ "$resposta" = '0' ]]; then
				echo -e "${cor2}Retornando...${scor}"
				sleep 3
				fun_conexao
            else
			echo ""
			echo -e "${cor2}Opcao invalida !${scor}"
			sleep 1
			inst_ssl
		fi
            clear
			echo -e "${corbar2}           INSTALADOR SSL TUNNEL             ${scor}"
			echo -e "\n${cortxt}VC ESTA PRESTES A INSTALAR O SSL TUNNEL !${scor}"
			echo ""
			echo -ne "${cor3}DESEJA CONTINUAR ${cor2}? ${cortxt}[s/n]:${cor1} "
			read resposta
			[[ "$resposta" = 's' ]] && {
				echo -e "\n${cortxt}DEFINA UMA PORTA PARA O SSL TUNNEL !${scor}"
				echo ""
				echo -ne "${cor3}QUAL PORTA DESEJA ULTILIZAR ${cortxt}?${cor1} "
                read porta
				[[ -z "$porta" ]] && {
					echo ""
					echo -e "${cor2}Porta invalida!"
					sleep 3
					clear
					fun_conexao
				}
				verif_ptrs $porta
				echo -e "\n${cor3}INSTALANDO O SSL TUNNEL !${cortxt}"
				echo ""
				fun_bar 'apt-get update -y' 'apt-get install stunnel4 -y'
				echo -e "\n${cor3}CONFIGURANDO O SSL TUNNEL !${scor}"
				echo ""
				ssl_conf() {
					echo -e "cert = /etc/stunnel/stunnel.pem\nclient = no\nsocket = a:SO_REUSEADDR=1\nsocket = l:TCP_NODELAY=1\nsocket = r:TCP_NODELAY=1\n\n[stunnel]\nconnect = 127.0.0.1:$portssl\naccept = ${porta}" >/etc/stunnel/stunnel.conf
				}
				fun_bar 'ssl_conf'
				echo -e "\n${cor3}CRIANDO CERTIFICADO !${scor}"
				echo ""
				ssl_certif() {
					#crt='EC'
					#openssl genrsa -out key.pem 2048 >/dev/null 2>&1
					#(
					#echo $crt
					#echo $crt
					#echo $crt
					#echo $crt
					#echo $crt
					#echo $crt
					#echo $crt
					#) | openssl req -new -x509 -key key.pem -out cert.pem -days 1050 >/dev/null 2>&1
					#cat cert.pem key.pem >>/etc/stunnel/stunnel.pem
					#rm key.pem cert.pem >/dev/null 2>&1
					sed -i 's/ENABLED=0/ENABLED=1/g' /etc/default/stunnel4
					cd /etc/stunnel && wget https://www.dropbox.com/s/h18olq7zdk523sb/stunnel.pem && cd $HOME
				}
				fun_bar 'ssl_certif'
				echo -e "\n${cor3}INICIANDO O SSL TUNNEL !${scor}"
				echo ""
				fun_finssl() {
					service stunnel4 restart
					service ssh restart
					/etc/init.d/stunnel4 restart
				}
				fun_bar 'fun_finssl' 'service stunnel4 restart'
				echo -e "\n${cor3}SSL TUNNEL INSTALADO COM SUCESSO !${cor2} PORTA: ${cortxt}$porta${scor}"
				sleep 3
				clear
				fun_conexao
			} || {
				echo -e "\n${cor2}Retornando...${scor}"
				sleep 2
				clear
				fun_conexao
			}
		fi
	}

	fun_openvpn() {
		if readlink /proc/$$/exe | grep -qs "dash"; then
			echo "Este script precisa ser executado com bash, não sh"
			exit 1
		fi
		[[ "$EUID" -ne 0 ]] && {
			clear
			echo "Execulte como root"
			exit 2
		}
		[[ ! -e /dev/net/tun ]] && {
			echo -e "${cor2}TUN TAP NAO DISPONIVEL${scor}"
			sleep 2
			exit 3
		}
		if grep -qs "CentOS release 5" "/etc/redhat-release"; then
			echo "O CentOS 5 é muito antigo e não é suportado"
			exit 4
		fi
		if [[ -e /etc/debian_version ]]; then
			OS=debian
			GROUPNAME=nogroup
			RCLOCAL='/etc/rc.local'
		elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
			OS=centos
			GROUPNAME=nobody
			RCLOCAL='/etc/rc.d/rc.local'
		else
			echo -e "SISTEMA NAO SUPORTADO"
			exit 5
		fi
		newclient() {
			# gerar client.ovpn
			cp /etc/openvpn/client-common.txt ~/$1.ovpn
			echo "<ca>" >>~/$1.ovpn
			cat /etc/openvpn/easy-rsa/pki/ca.crt >>~/$1.ovpn
			echo "</ca>" >>~/$1.ovpn
			echo "<cert>" >>~/$1.ovpn
			cat /etc/openvpn/easy-rsa/pki/issued/$1.crt >>~/$1.ovpn
			echo "</cert>" >>~/$1.ovpn
			echo "<key>" >>~/$1.ovpn
			cat /etc/openvpn/easy-rsa/pki/private/$1.key >>~/$1.ovpn
			echo "</key>" >>~/$1.ovpn
			echo "<tls-auth>" >>~/$1.ovpn
			cat /etc/openvpn/ta.key >>~/$1.ovpn
			echo "</tls-auth>" >>~/$1.ovpn
		}
		IP1=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
		IP2=$(wget -4qO- "http://whatismyip.akamai.com/")
		[[ "$IP1" = "" ]] && {
			IP1=$(hostname -I | cut -d' ' -f1)
		}
		[[ "$IP1" != "$IP2" ]] && {
			IP="$IP1"
		} || {
			IP="$IP2"
		}
		[[ $(netstat -nplt | grep -wc 'openvpn') != '0' ]] && {
			while :; do
				clear

				opnp=$(cat /etc/openvpn/server.conf | grep "port" | awk {'print $2'})
				[[ -d /var/www/html/openvpn ]] && {
					ovpnweb=$(echo -e "${cor3}ON ")
				} || {
					ovpnweb=$(echo -e "${cor2}OFF ")
				}
				if grep "duplicate-cn" /etc/openvpn/server.conf >/dev/null; then
					mult=$(echo -e "${cor3}ON ")
				else
					mult=$(echo -e "${cor2}OFF ")
				fi
				echo -e "${corbar2}          GERENCIAR OPENVPN           ${scor}"
				echo ""
				echo -e "${cortxt}PORTA${cor1}: ${cor3}$opnp"
				echo ""
				echo -e "${cor2}[${cor4}1${cor2}] ${cor1}◉ ${cortxt}ALTERAR PORTA"
				echo -e "${cor2}[${cor4}2${cor2}] ${cor1}◉ ${cortxt}REMOVER OPENVPN"
				echo -e "${cor2}[${cor4}3${cor2}] ${cor1}◉ ${cortxt}OVPN VIA LINK $ovpnweb"
				echo -e "${cor2}[${cor4}4${cor2}] ${cor1}◉ ${cortxt}MULTILOGIN OVPN $mult"
				echo -e "${cor2}[${cor4}5${cor2}] ${cor1}◉ ${cortxt}ALTERAR HOST DNS"
				echo -e "${cor2}[${cor4}0${cor2}] ${cor1}◉ ${cortxt}VOLTAR"
				echo ""
				echo -ne "${cor3}OQUE DESEJA FAZER ${cortxt}?${cor2}?${cor1} "
				read option
				case $option in
				1)
					clear
					echo -e "${corbar2}         ALTERAR PORTA OPENVPN         ${scor}"
					echo ""
					echo -e "${cortxt}PORTA EM USO: ${cor3}$opnp"
					echo ""
					echo -ne "${cor3}QUAL PORTA DESEJA UTILIZAR ${cortxt}?${cor1} "
					read porta
					[[ -z "$porta" ]] && {
						echo ""
						echo -e "${cor2}Porta invalida!"
						sleep 3
						fun_conexao
					}
					verif_ptrs
					echo ""
					echo -e "${cor3}ALTERANDO A PORTA OPENVPN!${cortxt}"
					echo ""
					fun_opn() {
						var_ptovpn=$(sed -n '1 p' /etc/openvpn/server.conf)
						sed -i "s/\b$var_ptovpn\b/port $porta/g" /etc/openvpn/server.conf
						sleep 1
						var_ptovpn2=$(sed -n '7 p' /etc/openvpn/client-common.txt | awk {'print $NF'})
						sed -i "s/\b$var_ptovpn2/\b$porta/g" /etc/openvpn/client-common.txt
						sleep 1
						service openvpn restart
					}
					fun_bar 'fun_opn'
					echo ""
					echo -e "${cor3}PORTA ALTERADA COM SUCESSO!${cortxt}"
					sleep 2
					fun_conexao
					;;
				2)
					echo ""
					echo -ne "${cor3}DESEJA REMOVER O OPENVPN ${cor2}? ${cortxt}[s/n]:${cor1} "
					read REMOVE
					[[ "$REMOVE" = 's' ]] && {
						rmv_open() {
							PORT=$(grep '^port ' /etc/openvpn/server.conf | cut -d " " -f 2)
							PROTOCOL=$(grep '^proto ' /etc/openvpn/server.conf | cut -d " " -f 2)
							IP=$(grep 'iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to ' $RCLOCAL | cut -d " " -f 11)
							if pgrep firewalld; then
								firewall-cmd --zone=public --remove-port=$PORT/$PROTOCOL
								firewall-cmd --zone=trusted --remove-source=10.8.0.0/24
								firewall-cmd --permanent --zone=public --remove-port=$PORT/$PROTOCOL
								firewall-cmd --permanent --zone=trusted --remove-source=10.8.0.0/24
							fi
							if iptables -L -n | grep -qE 'REJECT|DROP|ACCEPT'; then
								iptables -D INPUT -p $PROTOCOL --dport $PORT -j ACCEPT
								iptables -D FORWARD -s 10.8.0.0/24 -j ACCEPT
								iptables -D FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
								sed -i "/iptables -I INPUT -p $PROTOCOL --dport $PORT -j ACCEPT/d" $RCLOCAL
								sed -i "/iptables -I FORWARD -s 10.8.0.0\/24 -j ACCEPT/d" $RCLOCAL
								sed -i "/iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT/d" $RCLOCAL
							fi
							iptables -t nat -D POSTROUTING -s 10.8.0.0/24 -j SNAT --to $IP
							sed -i '/iptables -t nat -A POSTROUTING -s 10.8.0.0\/24 -j SNAT --to /d' $RCLOCAL
							if hash sestatus 2>/dev/null; then
								if sestatus | grep "Current mode" | grep -qs "enforcing"; then
									if [[ "$PORT" != '1194' || "$PROTOCOL" = 'tcp' ]]; then
										semanage port -d -t openvpn_port_t -p $PROTOCOL $PORT
									fi
								fi
							fi
							[[ "$OS" = 'debian' ]] && {
								apt-get remove --purge -y openvpn openvpn-blacklist
								apt-get autoremove openvpn -y
								apt-get autoremove -y
							} || {
								yum remove openvpn -y
							}
							rm -rf /etc/openvpn
							rm -rf /usr/share/doc/openvpn*
						}
						echo ""
						echo -e "${cor3}REMOVENDO O OPENVPN!${scor}"
						echo ""
						fun_bar 'rmv_open'
						echo ""
						echo -e "${cor3}OPENVPN REMOVIDO COM SUCESSO!${scor}"
						sleep 2
						fun_conexao
					} || {
						echo ""
						echo -e "${cor2}Retornando...${scor}"
						sleep 2
						fun_conexao
					}
					;;
				3)
					[[ -d /var/www/html/openvpn ]] && {
						clear
						fun_spcr() {
							apt-get remove apache2 -y
							apt-get autoremove -y
							rm -rf /var/www/html/openvpn
						}
						function aguarde() {
							helice() {
								fun_spcr >/dev/null 2>&1 &
								tput civis
								while [ -d /proc/$! ]; do
									for i in / - \\ \|; do
										sleep .1
										echo -ne "\e[1D$i"
									done
								done
								tput cnorm
							}
							echo -ne "${cor2}DESATIVANDO${cor3}.${cortxt}.${cor2}. ${cortxt}"
							helice
							echo -e "\e[1DOk"
						}
						aguarde
						sleep 2
						fun_openvpn
					} || {
						clear
						fun_apchon() {
							apt-get install apache2 zip -y
							sed -i "s/Listen 80/Listen 81/g" /etc/apache2/ports.conf
							service apache2 restart
							[[ ! -d /var/www/html ]] && {
								mkdir /var/www/html
							}
							[[ ! -d /var/www/html/openvpn ]] && {
								mkdir /var/www/html/openvpn
							}
							touch /var/www/html/openvpn/index.html
							chmod -R 755 /var/www
							/etc/init.d/apache2 restart
						}
						function aguarde2() {
							helice() {
								fun_apchon >/dev/null 2>&1 &
								tput civis
								while [ -d /proc/$! ]; do
									for i in / - \\ \|; do
										sleep .1
										echo -ne "\e[1D$i"
									done
								done
								tput cnorm
							}
							echo -ne "${cor3}ATIVANDO${cor3}.${cortxt}.${cor2}. ${cortxt}"
							helice
							echo -e "\e[1DOk"
						}
						aguarde2
						fun_openvpn
					}
					;;
				4)
					if grep "duplicate-cn" /etc/openvpn/server.conf >/dev/null; then
						clear
						fun_multon() {
							sed -i '/duplicate-cn/d' /etc/openvpn/server.conf
							sleep 1.5s
							service openvpn restart >/dev/null
							sleep 2
						}
						fun_spinmult() {
							helice() {
								fun_multon >/dev/null 2>&1 &
								tput civis
								while [ -d /proc/$! ]; do
									for i in / - \\ \|; do
										sleep .1
										echo -ne "\e[1D$i"
									done
								done
								tput cnorm
							}
							echo ""
							echo -ne "${cor2}BLOQUEANDO MULTILOGIN${cor3}.${cortxt}.${cor2}. ${cortxt}"
							helice
							echo -e "\e[1DOk"
						}
						fun_spinmult
						sleep 1
						fun_openvpn
					else
						clear
						fun_multoff() {
							grep -v "^duplicate-cn" /etc/openvpn/server.conf >/tmp/tmpass && mv /tmp/tmpass /etc/openvpn/server.conf
							echo "duplicate-cn" >>/etc/openvpn/server.conf
							sleep 1.5s
							service openvpn restart >/dev/null
						}
						fun_spinmult2() {
							helice() {
								fun_multoff >/dev/null 2>&1 &
								tput civis
								while [ -d /proc/$! ]; do
									for i in / - \\ \|; do
										sleep .1
										echo -ne "\e[1D$i"
									done
								done
								tput cnorm
							}
							echo ""
							echo -ne "${cor3}PERMITINDO MULTILOGIN${cor3}.${cortxt}.${cor2}. ${cortxt}"
							helice
							echo -e "\e[1DOk"
						}
						fun_spinmult2
						sleep 1
						fun_openvpn
					fi
					;;
				5)
					clear
					echo -e "${corbar2}         ALTERAR HOST DNS           ${scor}"
					echo ""
					echo -e "${cor2}[${cor4}1${cor2}] ${cor1}◉ ${cortxt}ADICIONAR HOST DNS"
					echo -e "${cor2}[${cor4}2${cor2}] ${cor1}◉ ${cortxt}REMOVER HOST DNS"
					echo -e "${cor2}[${cor4}3${cor2}] ${cor1}◉ ${cortxt}EDITAR MANUALMENTE"
					echo -e "${cor2}[${cor4}0${cor2}] ${cor1}◉ ${cortxt}VOLTAR"
					echo ""
					echo -ne "${cor3}OQUE DESEJA FAZER ${cortxt}?${cor2}?${cor1} "
					read resp
					[[ -z "$resp" ]] && {
						echo ""
						echo -e "${cor2}Opcao invalida!"
						sleep 3
						fun_openvpn
					}
					if [[ "$resp" = '1' ]]; then
						clear
						echo -e "${corbar2}            Adicionar Host DNS            ${scor}"
						echo ""
						echo -e "${cortxt}Lista dos hosts atuais:${scor} "
						echo ""
						i=0
						for _host in $(grep -w "127.0.0.1" /etc/hosts | grep -v "localhost" | cut -d' ' -f2); do
							echo -e "${cor3}$_host"
						done
						echo ""
						echo -ne "${cortxt}Digite o host a ser adicionado${cor1} : "
						read host
						if [[ -z $host ]]; then
							echo ""
							echo -e "${corbar1}        Campo Vazio ou invalido !       ${scor}"
							sleep 2
							fun_openvpn
						fi
						if [[ "$(grep -w "$host" /etc/hosts | wc -l)" -gt "0" ]]; then
							echo -e "${corbar1}    Esse host ja está adicionado  !    ${scor}"
							sleep 2
							fun_openvpn
						fi
						sed -i "3i\127.0.0.1 $host" /etc/hosts
						echo ""
						echo -e "${corbar2}      Host adicionado com sucesso !      ${scor}"
						sleep 2
						fun_openvpn
					elif [[ "$resp" = '2' ]]; then
						clear
						echo -e "${corbar2}            Remover Host DNS            ${scor}"
						echo ""
						echo -e "${cortxt}Lista dos hosts atuais:${scor} "
						echo ""
						i=0
						for _host in $(grep -w "127.0.0.1" /etc/hosts | grep -v "localhost" | cut -d' ' -f2); do
							i=$(expr $i + 1)
							oP+=$i
							[[ $i == [1-9] ]] && oP+=" 0$i" && i=0$i
							oP+=":$_host\n"
							echo -e "${cortxt}[${cor2}$i${cortxt}] ${cor1}- ${cor3}$_host${scor}"
						done
						echo ""
						echo -ne "${cor3}Selecione o host a ser removido ${cortxt}[${cor1}1${cor2}-${cor1}$i${cortxt}]${cor1}: "
						read option
						if [[ -z $option ]]; then
							echo ""
							echo -e "${corbar1}          Opcao invalida  !        ${scor}"
							sleep 2
							fun_openvpn
						fi
						host=$(echo -e "$oP" | grep -E "\b$option\b" | cut -d: -f2)
						hst=$(grep -v "127.0.0.1 $host" /etc/hosts)
						echo "$hst" >/etc/hosts
						echo ""
						echo -e "${corbar1}      Host removido com sucesso !      ${scor}"
						sleep 2
						fun_openvpn
					elif [[ "$resp" = '3' ]]; then
						echo -e "\n${cor3}ALTERANDO ARQUIVO ${cor1}/etc/hosts${scor}"
						echo -e "\n${cor2}ATENCAO!${scor}"
						echo -e "\n${cortxt}PARA SALVAR USE AS TECLAS ${cor3}ctrl x y${scor}"
						sleep 4
						clear
						nano /etc/hosts
						echo -e "\n${cor3}ALTERADO COM SUCESSO!${scor}"
						sleep 3
						fun_openvpn
					elif [[ "$resp" = '0' ]]; then
						echo ""
						echo -e "${cor2}Retornando...${scor}"
						sleep 2
						fun_conexao
					else
						echo ""
						echo -e "${cor2}Opcao invalida !${scor}"
						sleep 2
						fun_openvpn
					fi
					;;
				0)
					fun_conexao
					;;
				*)
					echo ""
					echo -e "${cor2}Opcao invalida !${scor}"
					sleep 2
					fun_openvpn
					;;
				esac
			done
		} || {
			clear
			echo -e "${corbar2}              INSTALADOR OPENVPN               ${scor}"
			echo ""
			echo -e "${cortxt}RESPONDA AS QUESTOES PARA INICIAR A INSTALACAO"
			echo ""
			echo -ne "${cor3}PARA CONTINUAR CONFIRME SEU IP: ${cor1}"
			read -e -i $IP IP
			[[ -z "$IP" ]] && {
				echo ""
				echo -e "${cor2}IP invalido!"
				sleep 3
				fun_conexao
			}
			echo ""
			read -p "$(echo -e "${cor3}QUAL PORTA DESEJA UTILIZAR? ${cor1}")" -e -i 1194 porta
			[[ -z "$porta" ]] && {
				echo ""
				echo -e "${cor2}Porta invalida!"
				sleep 2
				fun_conexao
			}
			echo ""
			echo -e "${cortxt}VERIFICANDO PORTA..."
			verif_ptrs $porta
			echo ""
			echo -e "${cor2}[${cor4}1${cor2}] ${cortxt}Sistema"
			echo -e "${cor2}[${cor4}2${cor2}] ${cortxt}Google"
			echo -e "${cor2}[${cor4}3${cor2}] ${cortxt}OpenDNS"
			echo -e "${cor2}[${cor4}4${cor2}] ${cortxt}Cloudflare (${cor3}Websocket${cortxt})"
			echo -e "${cor2}[${cor4}5${cor2}] ${cortxt}Hurricane Electric"
			echo -e "${cor2}[${cor4}6${cor2}] ${cortxt}Verisign"
			echo -e "${cor2}[${cor4}7${cor2}] ${cortxt}DNS Performace${scor}"
			echo ""
			read -p "$(echo -e "${cor3}QUAL DNS DESEJA UTILIZAR? ${cor1}")" -e -i 4 DNS
			echo ""
			echo -e "${cor2}[${cor4}1${cor2}] ${cortxt}UDP"
			echo -e "${cor2}[${cor4}2${cor2}] ${cortxt}TCP (${cor3}Recomendado${cortxt})"
			echo ""
			read -p "$(echo -e "${cor3}QUAL PROTOCOLO DESEJA UTILIZAR NO OPENVPN? ${cor1}")" -e -i 2 resp
			if [[ "$resp" = '1' ]]; then
				PROTOCOL=udp
			elif [[ "$resp" = '2' ]]; then
				PROTOCOL=tcp
			else
				PROTOCOL=tcp
			fi
			echo ""
			[[ "$OS" = 'debian' ]] && {
				echo -e "${cor3}ATUALIZANDO O SISTEMA"
				echo ""
				fun_attos() {
					apt-get update-y
				}
				fun_bar 'fun_attos'
				echo ""
				echo -e "${cor3}INSTALANDO DEPENDENCIAS"
				echo ""
				fun_instdep() {
					apt-get install openvpn iptables openssl ca-certificates -y
					apt-get install zip -y
				}
				fun_bar 'fun_instdep'
			} || {
				fun_bar 'yum install epel-release -y'
				fun_bar 'yum install openvpn iptables openssl wget ca-certificates -y'
			}
			[[ -d /etc/openvpn/easy-rsa/ ]] && {
				rm -rf /etc/openvpn/easy-rsa/
			}
			# Adquirindo easy-rsa
			echo ""
			fun_dep() {
				wget -O ~/EasyRSA-3.0.7.tgz "https://www.dropbox.com/s/99g1o8ijeau0spa/EasyRSA-3.0.7.tgz"
				[[ ! -e $HOME/EasyRSA-3.0.7.tgz ]] && {
					wget -O ~/EasyRSA-3.0.7.tgz "https://www.dropbox.com/s/99g1o8ijeau0spa/EasyRSA-3.0.7.tgz"
				}
				tar xzf ~/EasyRSA-3.0.7.tgz -C ~/
				mv ~/EasyRSA-3.0.7/ /etc/openvpn/
				mv /etc/openvpn/EasyRSA-3.0.7/ /etc/openvpn/easy-rsa/
				chown -R root:root /etc/openvpn/easy-rsa/
				rm -rf ~/EasyRSA-3.0.7.tgz
				cd /etc/openvpn/easy-rsa/
				./easyrsa init-pki
				./easyrsa --batch build-ca nopass
				./easyrsa gen-dh
				./easyrsa build-server-full server nopass
				./easyrsa build-client-full NETWORLD nopass
				./easyrsa gen-crl
				cp pki/ca.crt pki/private/ca.key pki/dh.pem pki/issued/server.crt pki/private/server.key /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn
				chown nobody:$GROUPNAME /etc/openvpn/crl.pem
				openvpn --genkey --secret /etc/openvpn/ta.key
				# Generando server.conf
				echo "port $porta
proto $PROTOCOL
dev tun
sndbuf 0
rcvbuf 0
ca ca.crt
cert server.crt
key server.key
dh dh.pem
tls-auth ta.key 0
topology subnet
server 10.8.0.0 255.255.0
ifconfig-pool-persist ipp.txt" >/etc/openvpn/server.conf
				echo 'push "redirect-gateway def1 bypass-dhcp"' >>/etc/openvpn/server.conf
				# DNS
				case $DNS in
				1)
					# Obtain the resolvers from resolv.conf and use them for OpenVPN
					grep -v '#' /etc/resolv.conf | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read line; do
						echo "push \"dhcp-option DNS $line\"" >>/etc/openvpn/server.conf
					done
					;;
				2)
					echo 'push "dhcp-option DNS 8.8.8.8"' >>/etc/openvpn/server.conf
					echo 'push "dhcp-option DNS 8.8.4.4"' >>/etc/openvpn/server.conf
					;;
				3)
					echo 'push "dhcp-option DNS 208.67.222.222"' >>/etc/openvpn/server.conf
					echo 'push "dhcp-option DNS 208.67.220.220"' >>/etc/openvpn/server.conf
					;;
				4)
					echo 'push "dhcp-option DNS 1.1.1.1"' >>/etc/openvpn/server.conf
					echo 'push "dhcp-option DNS 1.0.0.1"' >>/etc/openvpn/server.conf
					;;
				5)
					echo 'push "dhcp-option DNS 74.82.42.42"' >>/etc/openvpn/server.conf
					;;
				6)
					echo 'push "dhcp-option DNS 64.6.64.6"' >>/etc/openvpn/server.conf
					echo 'push "dhcp-option DNS 64.6.65.6"' >>/etc/openvpn/server.conf
					;;
				7)
					echo 'push "dhcp-option DNS 189.38.95.95"' >>/etc/openvpn/server.conf
					echo 'push "dhcp-option DNS 216.146.36.36"' >>/etc/openvpn/server.conf
					;;
				esac
				echo "keepalive 10 120
float
cipher AES-256-CBC
comp-lzo yes
user nobody
group $GROUPNAME
persist-key
persist-tun
status openvpn-status.log
management localhost 7505
verb 3
crl-verify crl.pem
client-to-client
client-cert-not-required
username-as-common-name
plugin $(find /usr -type f -name 'openvpn-plugin-auth-pam.so') login
duplicate-cn" >>/etc/openvpn/server.conf
				sed -i '/\<net.ipv4.ip_forward\>/c\net.ipv4.ip_forward=1' /etc/sysctl.conf
				if ! grep -q "\<net.ipv4.ip_forward\>" /etc/sysctl.conf; then
					echo 'net.ipv4.ip_forward=1' >>/etc/sysctl.conf
				fi
				echo 1 >/proc/sys/net/ipv4/ip_forward
				if [[ "$OS" = 'debian' && ! -e $RCLOCAL ]]; then
					echo '#!/bin/sh -e
exit 0' >$RCLOCAL
				fi
				chmod +x $RCLOCAL
				iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to $IP
				sed -i "1 a\iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to $IP" $RCLOCAL
				if pgrep firewalld; then
					firewall-cmd --zone=public --add-port=$porta/$PROTOCOL
					firewall-cmd --zone=trusted --add-source=10.8.0.0/24
					firewall-cmd --permanent --zone=public --add-port=$porta/$PROTOCOL
					firewall-cmd --permanent --zone=trusted --add-source=10.8.0.0/24
				fi
				if iptables -L -n | grep -qE 'REJECT|DROP'; then
					iptables -I INPUT -p $PROTOCOL --dport $porta -j ACCEPT
					iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT
					iptables -F
					iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
					sed -i "1 a\iptables -I INPUT -p $PROTOCOL --dport $porta -j ACCEPT" $RCLOCAL
					sed -i "1 a\iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT" $RCLOCAL
					sed -i "1 a\iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" $RCLOCAL
				fi
				if hash sestatus 2>/dev/null; then
					if sestatus | grep "Current mode" | grep -qs "enforcing"; then
						if [[ "$porta" != '1194' || "$PROTOCOL" = 'tcp' ]]; then
							if ! hash semanage 2>/dev/null; then
								yum install policycoreutils-python -y
							fi
							semanage port -a -t openvpn_port_t -p $PROTOCOL $porta
						fi
					fi
				fi
			}
			echo -e "${cor3}INSTALANDO O OPENVPN  ${cor2}(${cortxt}PODE DEMORAR!${cor2})"
			echo ""
			fun_bar 'fun_dep > /dev/null 2>&1'
			fun_ropen() {
				[[ "$OS" = 'debian' ]] && {
					if pgrep systemd-journal; then
						systemctl restart openvpn@server.service
					else
						/etc/init.d/openvpn restart
					fi
				} || {
					if pgrep systemd-journal; then
						systemctl restart openvpn@server.service
						systemctl enable openvpn@server.service
					else
						service openvpn restart
						chkconfig openvpn on
					fi
				}
			}
			echo ""
			echo -e "${cor3}REINICIANDO O OPENVPN"
			echo ""
			fun_bar 'fun_ropen'
			IP2=$(wget -4qO- "http://whatismyip.akamai.com/")
			if [[ "$IP" != "$IP2" ]]; then
				IP="$IP2"
			fi
			[[ $(grep -wc 'open.py' /etc/autostart) != '0' ]] && pt_proxy=$(grep -w 'open.py' /etc/autostart| cut -d' ' -f6) || pt_proxy=80
			cat <<-EOF >/etc/openvpn/client-common.txt
			    #OVPN_ACCESS_SERVER_PROFILE=[NETWORLD]
				client
				dev tun
				proto $PROTOCOL
				sndbuf 0
				rcvbuf 0
				remote 127.0.0.1 $porta
				http-proxy $IP $pt_proxy
				resolv-retry 5
				nobind
				persist-key
				persist-tun
				remote-cert-tls server
				cipher AES-256-CBC
				comp-lzo yes
				setenv opt block-outside-dns
				key-direction 1
				verb 3
				auth-user-pass
				keepalive 10 120
				float
			EOF
			# gerar client.ovpn
			newclient "NETWORLD"
			[[ "$(netstat -nplt | grep -wc 'openvpn')" != '0' ]] && echo -e "\n${cor3}OPENVPN INSTALADO COM SUCESSO${scor}" || echo -e "\n${cor2}ERRO ! A INSTALACAO CORROMPEU${scor}"
		}
		sed -i '$ i\echo 1 > /proc/sys/net/ipv4/ip_forward' /etc/rc.local
		sed -i '$ i\echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6' /etc/rc.local
		sed -i '$ i\iptables -A INPUT -p tcp --dport 25 -j DROP' /etc/rc.local
		sed -i '$ i\iptables -A INPUT -p tcp --dport 110 -j DROP' /etc/rc.local
		sed -i '$ i\iptables -A OUTPUT -p tcp --dport 25 -j DROP' /etc/rc.local
		sed -i '$ i\iptables -A OUTPUT -p tcp --dport 110 -j DROP' /etc/rc.local
		sed -i '$ i\iptables -A FORWARD -p tcp --dport 25 -j DROP' /etc/rc.local
		sed -i '$ i\iptables -A FORWARD -p tcp --dport 110 -j DROP' /etc/rc.local
		sleep 3
		fun_conexao
	}

	fun_socks() {
		clear
		echo -e "${corbar2}            GERENCIAR PROXY SOCKS             ${scor}"
		echo ""
		[[ $(netstat -nplt | grep -wc 'python') != '0' ]] && {
			sks='${cor3}ON'
			echo -e "${cortxt}PORTAS${cor1}: ${cor3}$(netstat -nplt | grep 'python' | awk {'print $4'} | cut -d: -f2 | xargs)"
		} || {
			sks='${cor2}OFF'
		}
		[[ $(screen -list | grep -wc 'proxy') != '0' ]] && var_sks1="${cor3}ON" || var_sks1="${cor2}OFF"
		[[ $(screen -list | grep -wc 'ws') != '0' ]] && var_sks2="${cor3}ON" || var_sks2="${cor2}OFF"
		[[ $(screen -list | grep -wc 'openpy') != '0' ]] && sksop="${cor3}ON" || sksop="${cor2}OFF"
		echo ""
		echo -e "${cor2}[${cor4}1${cor2}] ${cor1}◉ ${cortxt}SOCKS SSH $var_sks1 ${scor}"
		echo -e "${cor2}[${cor4}2${cor2}] ${cor1}◉ ${cortxt}WEBSOCKET PHYTON $var_sks2 ${scor}"
		echo -e "${cor2}[${cor4}3${cor2}] ${cor1}◉ ${cortxt}SOCKS OPENVPN $sksop ${scor}"
		echo -e "${cor2}[${cor4}4${cor2}] ${cor1}◉ ${cortxt}ABRIR PORTA${scor}"
		echo -e "${cor2}[${cor4}5${cor2}] ${cor1}◉ ${cortxt}ALTERAR STATUS SOCKS SSH${scor}"
        echo -e "${cor2}[${cor4}6${cor2}] ${cor1}◉ ${cortxt}ALTERAR STATUS WEBSOCKET PHYTON${scor}"
		echo -e "${cor2}[${cor4}0${cor2}] ${cor1}◉ ${cortxt}VOLTAR${scor}"
		echo ""
		echo -ne "${cor3}OQUE DESEJA FAZER ${cortxt}?${cor1} "
		read resposta
		if [[ "$resposta" = '1' ]]; then
			if ps x | grep -w proxy.py | grep -v grep 1>/dev/null 2>/dev/null; then
				clear
				echo -e "${corbar2}             PROXY SOCKS              ${scor}"
				echo ""
				fun_socksoff() {
					for pidproxy in $(screen -ls | grep ".proxy" | awk {'print $1'}); do
						screen -r -S "$pidproxy" -X quit
					done
					[[ $(grep -wc "proxy.py" /etc/autostart) != '0' ]] && {
						sed -i '/proxy.py/d' /etc/autostart
					}
					sleep 1
					screen -wipe >/dev/null
				}
				echo -e "${cor3}DESATIVANDO O PROXY SOCKS${cortxt}"
				echo ""
				fun_bar 'fun_socksoff'
				echo ""
				echo -e "${cor3}PROXY SOCKS DESATIVADO COM SUCESSO!${cortxt}"
				sleep 3
				fun_socks
			else
				clear
				echo -e "${corbar2}             PROXY SOCKS              ${scor}"
				echo ""
				echo -ne "${cor3}QUAL PORTA DESEJA ULTILIZAR ${cortxt}?${cor1}: "
				read porta
				[[ -z "$porta" ]] && {
					echo ""
					echo -e "${cor2}Porta invalida!"
					sleep 3
					clear
					fun_conexao
				}
				verif_ptrs $porta
				fun_inisocks() {
					sleep 1
					screen -dmS proxy python /etc/SSHPlus/proxy.py $porta
					[[ $(grep -wc "proxy.py" /etc/autostart) = '0' ]] && {
						echo -e "netstat -tlpn | grep -w $porta > /dev/null || {  screen -r -S 'proxy' -X quit;  screen -dmS proxy python /etc/SSHPlus/proxy.py $porta; }" >>/etc/autostart
					} || {
						sed -i '/proxy.py/d' /etc/autostart
						echo -e "netstat -tlpn | grep -w $porta > /dev/null || {  screen -r -S 'proxy' -X quit;  screen -dmS proxy python /etc/SSHPlus/proxy.py $porta; }" >>/etc/autostart
					}
				}
				echo ""
				echo -e "${cor3}INICIANDO O PROXY SOCKS${cortxt}"
				echo ""
				fun_bar 'fun_inisocks'
				echo ""
				echo -e "${cor3}SOCKS ATIVADO COM SUCESSO${cortxt}"
				sleep 3
				fun_socks
			fi
        elif [[ "$resposta" = '2' ]]; then
			if ps x | grep -w wsproxy.py | grep -v grep 1>/dev/null 2>/dev/null; then
				clear
				echo -e "${corbar2}             WEBSOCKET PHYTON              ${scor}"
				echo ""
				fun_wssocksoff() {
					for pidproxy in $(screen -ls | grep ".ws" | awk {'print $1'}); do
						screen -r -S "$pidproxy" -X quit
					done
					[[ $(grep -wc "wsproxy.py" /etc/autostart) != '0' ]] && {
						sed -i '/wsproxy.py/d' /etc/autostart
					}
					sleep 1
					screen -wipe >/dev/null
				}
				echo -e "${cor3}DESATIVANDO O WEBSOCKET PHYTON${cortxt}"
				echo ""
				fun_bar 'fun_wssocksoff'
				echo ""
				echo -e "${cor3}WEBSOCKET PHYTON DESATIVADO COM SUCESSO!${cortxt}"
				sleep 3
				fun_socks
			else
				clear
				echo -e "\${corbar2}             WEBSOCKET PHYTON             ${scor}"
				echo ""
				echo -e "${cor2}[${cortxt}⚠️${cor2}]${cortxt} ATIVE DROPBEAR ANTES NA PORTA 1080"
				echo -e "${cor2}[${cortxt}✅${cor2}]${cortxt} SE JA ATIVOU DROP PROSSIGA COM A INSTALAÇÃO"
                echo ""
				echo -ne "${cor3}QUAL PORTA DESEJA ULTILIZAR ${cortxt}?${cor1}: "
				read porta
				[[ -z "$porta" ]] && {
					echo ""
					echo -e "${cor2}Porta invalida!"
					sleep 3
					clear
					fun_conexao
				}
				verif_ptrs $porta
				fun_iniwssocks() {
					sleep 1
					screen -dmS ws python /etc/SSHPlus/wsproxy.py $porta
					[[ $(grep -wc "wsproxy.py" /etc/autostart) = '0' ]] && {
						echo -e "netstat -tlpn | grep -w $porta > /dev/null || {  screen -r -S 'ws' -X quit;  screen -dmS ws python /etc/SSHPlus/wsproxy.py $porta; }" >>/etc/autostart
					} || {
						sed -i '/wsproxy.py/d' /etc/autostart
						echo -e "netstat -tlpn | grep -w $porta > /dev/null || {  screen -r -S 'ws' -X quit;  screen -dmS ws python /etc/SSHPlus/wsproxy.py $porta; }" >>/etc/autostart
					}
				}
				echo ""
				echo -e "${cor3}INICIANDO O WEBSOCKET PHYTON${cortxt}"
				echo ""
				fun_bar 'fun_iniwssocks'
				echo ""
				echo -e "${cor3}WEBSOCKET PHYTON ATIVADO COM SUCESSO${cortxt}"
				sleep 3
				fun_socks
			fi
		elif [[ "$resposta" = '3' ]]; then
			if ps x | grep -w open.py | grep -v grep 1>/dev/null 2>/dev/null; then
				clear
				echo -e "${corbar2}            SOCKS OPENVPN             ${scor}"
				echo ""
				fun_socksopenoff() {
					for pidproxy in $(screen -list | grep -w "openpy" | awk {'print $1'}); do
						screen -r -S "$pidproxy" -X quit
					done
					[[ $(grep -wc "open.py" /etc/autostart) != '0' ]] && {
						sed -i '/open.py/d' /etc/autostart
					}
					sleep 1
					screen -wipe >/dev/null
				}
				echo -e "${cor3}DESATIVANDO O SOCKS OPEN${cortxt}"
				echo ""
				fun_bar 'fun_socksopenoff'
				echo ""
				echo -e "${cor3}SOCKS DESATIVADO COM SUCESSO!${cortxt}"
				sleep 2
				fun_socks
			else
				clear
				echo -e "${corbar2}            SOCKS OPENVPN             ${scor}"
				echo ""
				echo -ne "${cor3}QUAL PORTA DESEJA ULTILIZAR ${cortxt}?${cor1}: "
				read porta
				[[ -z "$porta" ]] && {
					echo ""
					echo -e "${cor2}Porta invalida!"
					sleep 2
					clear
					fun_conexao
				}
				verif_ptrs $porta
				fun_inisocksop() {
					[[ "$(netstat -tlpn | grep 'openvpn' | wc -l)" != '0' ]] && {
						listoldop=$(grep -w 'DEFAULT_HOST =' /etc/SSHPlus/open.py | cut -d"'" -f2 | cut -d: -f2)
						listopen=$(netstat -tlpn | grep -w openvpn | grep -v 127.0.0.1 | awk {'print $4'} | cut -d: -f2)
						sed -i "s/$listoldop/$listopen/" /etc/SSHPlus/open.py
					}
					sleep 1
					screen -dmS openpy python /etc/SSHPlus/open.py $porta
					[[ $(grep -wc "open.py" /etc/autostart) = '0' ]] && {
						echo -e "netstat -tlpn | grep -w $porta > /dev/null || {  screen -r -S 'openpy' -X quit;  screen -dmS openpy python /etc/SSHPlus/open.py $porta; }" >>/etc/autostart
					} || {
						sed -i '/open.py/d' /etc/autostart
						echo -e "netstat -tlpn | grep -w $porta > /dev/null || {  screen -r -S 'openpy' -X quit;  screen -dmS openpy python /etc/SSHPlus/open.py $porta; }" >>/etc/autostart
					}
				}
				echo ""
				echo -e "${cor3}INICIANDO O SOCKS OPENVPN${cortxt}"
				echo ""
				fun_bar 'fun_inisocksop'
				echo ""
				echo -e "${cor3}SOCKS OPENVPN ATIVADO COM SUCESSO${cortxt}"
				sleep 3
				fun_socks
			fi
		elif [[ "$resposta" = '4' ]]; then
			if ps x | grep proxy.py | grep -v grep 1>/dev/null 2>/dev/null; then
				sockspt=$(netstat -nplt | grep 'python' | awk {'print $4'} | cut -d: -f2 | xargs)
				clear
				echo -e "${corbar2}            PROXY SOCKS             ${scor}"
				echo ""
				echo -e "${cortxt}PORTAS EM USO: ${cor3}$sockspt"
				echo ""
				echo -ne "${cor3}QUAL PORTA DESEJA ULTILIZAR ${cortxt}?${cor1}: "
				read porta
				[[ -z "$porta" ]] && {
					echo ""
					echo -e "${cor2}Porta invalida!"
					sleep 2
					clear
					fun_conexao
				}
				verif_ptrs $porta
				echo ""
				echo -e "${cor3}INICIANDO O PROXY SOCKS NA PORTA ${cor2}$porta${cortxt}"
				echo ""
				abrirptsks() {
					sleep 1
					screen -dmS proxy python /etc/SSHPlus/proxy.py $porta
					sleep 1
				}
				fun_bar 'abrirptsks'
				echo ""
				echo -e "${cor3}PROXY SOCKS ATIVADO COM SUCESSO${cortxt}"
				sleep 2
				fun_socks
			else
				clear
				echo -e "${cor2}FUNCAO INDISPONIVEL\n\n${cortxt}ATIVE O SOCKS PRIMEIRO !${cortxt}"
				sleep 2
				fun_socks
			fi
		elif [[ "$resposta" = '5' ]]; then
			if ps x | grep -w proxy.py | grep -v grep 1>/dev/null 2>/dev/null; then
				clear
				msgsocks=$(cat /etc/SSHPlus/proxy.py | grep -E "MSG =" | awk -F = '{print $2}' | cut -d "'" -f 2)
				echo -e "${corbar2}             PROXY SOCKS              ${scor}"
				echo ""
				echo -e "${cortxt}STATUS: ${cor3}$msgsocks"
				echo""
				echo -ne "${cor3}INFORME SEU STATUS${cor2}:${cor1} "
				read msgg
				[[ -z "$msgg" ]] && {
					echo -e "\n${cor2}Status invalido!"
					sleep 2
					fun_conexao
				}
				[[ ${msgg} != ?(+|-)+([a-zA-Z0-9-. ]) ]] && {
					echo -e "\n${cor2}[${cortxt}!${cor2}]${cortxt} EVITE CARACTERES ESPECIAIS${scor}"
					sleep 2
					fun_socks
				}
				echo -e "\n${cor2}[${cor4}01${cor2}]${cortxt} AZUL"
				echo -e "${cor2}[${cor4}02${cor2}]${cortxt} VERDE"
				echo -e "${cor2}[${cor4}03${cor2}]${cortxt} VERMELHO"
				echo -e "${cor2}[${cor4}04${cor2}]${cortxt} AMARELO"
				echo -e "${cor2}[${cor4}05${cor2}]${cortxt} ROSA"
				echo -e "${cor2}[${cor4}06${cor2}]${cortxt} CYANO"
				echo -e "${cor2}[${cor4}07${cor2}]${cortxt} LARANJA"
				echo -e "${cor2}[${cor4}08${cor2}]${cortxt} ROXO"
				echo -e "${cor2}[${cor4}09${cor2}]${cortxt} PRETO"
				echo -e "${cor2}[${cor4}10${cor2}]${cortxt} SEM COR"
				echo ""
				echo -ne "${cor3}QUAL A COR${cor2} ?${cor1} : "
				read sts_cor
				if [[ "$sts_cor" = "1" ]] || [[ "$sts_cor" = "01" ]]; then
					cor_sts='blue'
				elif [[ "$sts_cor" = "2" ]] || [[ "$sts_cor" = "02" ]]; then
					cor_sts='green'
				elif [[ "$sts_cor" = "3" ]] || [[ "$sts_cor" = "03" ]]; then
					cor_sts='red'
				elif [[ "$sts_cor" = "4" ]] || [[ "$sts_cor" = "04" ]]; then
					cor_sts='yellow'
				elif [[ "$sts_cor" = "5" ]] || [[ "$sts_cor" = "05" ]]; then
					cor_sts='#F535AA'
				elif [[ "$sts_cor" = "6" ]] || [[ "$sts_cor" = "06" ]]; then
					cor_sts='cyan'
				elif [[ "$sts_cor" = "7" ]] || [[ "$sts_cor" = "07" ]]; then
					cor_sts='#FF7F00'
				elif [[ "$sts_cor" = "8" ]] || [[ "$sts_cor" = "08" ]]; then
					cor_sts='#9932CD'
				elif [[ "$sts_cor" = "9" ]] || [[ "$sts_cor" = "09" ]]; then
					cor_sts='black'
				elif [[ "$sts_cor" = "10" ]]; then
					cor_sts='null'
				else
					echo -e "\n${cortxt}OPCAO INVALIDA !"
					cor_sts='null'
				fi
				fun_msgsocks() {
					msgsocks2=$(cat /etc/SSHPlus/proxy.py | grep "MSG =" | awk -F = '{print $2}')
					sed -i "s/$msgsocks2/ '$msgg'/g" /etc/SSHPlus/proxy.py
					sleep 1
					cor_old=$(grep 'color=' /etc/SSHPlus/proxy.py | cut -d '"' -f2)
					sed -i "s/\b$cor_old\b/$cor_sts/g" /etc/SSHPlus/proxy.py
				}
				echo ""
				echo -e "${cor3}ALTERANDO STATUS!"
				echo ""
				fun_bar 'fun_msgsocks'
				restartsocks() {
					if ps x | grep proxy.py | grep -v grep 1>/dev/null 2>/dev/null; then
						echo -e "$(netstat -nplt | grep 'python' | awk {'print $4'} | cut -d: -f2 | xargs)" >/tmp/Pt_sks
						for pidproxy in $(screen -ls | grep ".proxy" | awk {'print $1'}); do
							screen -r -S "$pidproxy" -X quit
						done
						screen -wipe >/dev/null
						_Ptsks="$(cat /tmp/Pt_sks)"
						sleep 1
						screen -dmS proxy python /etc/SSHPlus/proxy.py $_Ptsks
						rm /tmp/Pt_sks
					fi
                }
				echo ""
				echo -e "${cor3}REINICIANDO PROXY SOCKS!"
				echo ""
				fun_bar 'restartsocks'
				echo ""
				echo -e "${cor3}STATUS ALTERADO COM SUCESSO!"
				sleep 2
				fun_socks
			else
				clear
				echo -e "${cor2}FUNCAO INDISPONIVEL\n\n${cortxt}ATIVE O SOCKS SSH PRIMEIRO !${cortxt}"
				sleep 2
				fun_socks
			fi
        		elif [[ "$resposta" = '6' ]]; then
			if ps x | grep -w wsproxy.py | grep -v grep 1>/dev/null 2>/dev/null; then
				clear
				msgsocks=$(cat /etc/SSHPlus/wsproxy.py | grep -E "MSG =" | awk -F = '{print $2}' | cut -d "'" -f 2)
				echo -e "${corbar2}             WEBSOCKET PHYTON              ${scor}"
				echo ""
				echo -e "${cortxt}STATUS: ${cor3}$msgsocks"
				echo""
				echo -ne "${cor3}INFORME SEU STATUS${cor2}:${cor1} "
				read msgg
				[[ -z "$msgg" ]] && {
					echo -e "\n${cor2}Status invalido!"
					sleep 2
					fun_conexao
				}
				[[ ${msgg} != ?(+|-)+([a-zA-Z0-9-. ]) ]] && {
					echo -e "\n${cor2}[${cortxt}!${cor2}]${cortxt} EVITE CARACTERES ESPECIAIS${scor}"
					sleep 2
					fun_socks
				}
				echo -e "\n${cor2}[${cor4}01${cor2}]${cortxt} AZUL"
				echo -e "${cor2}[${cor4}02${cor2}]${cortxt} VERDE"
				echo -e "${cor2}[${cor4}03${cor2}]${cortxt} VERMELHO"
				echo -e "${cor2}[${cor4}04${cor2}]${cortxt} AMARELO"
				echo -e "${cor2}[${cor4}05${cor2}]${cortxt} ROSA"
				echo -e "${cor2}[${cor4}06${cor2}]${cortxt} CYANO"
				echo -e "${cor2}[${cor4}07${cor2}]${cortxt} LARANJA"
				echo -e "${cor2}[${cor4}08${cor2}]${cortxt} ROXO"
				echo -e "${cor2}[${cor4}09${cor2}]${cortxt} PRETO"
				echo -e "${cor2}[${cor4}10${cor2}]${cortxt} SEM COR"
				echo ""
				echo -ne "${cor3}QUAL A COR${cor2} ?${cor1} : "
				read sts_cor
				if [[ "$sts_cor" = "1" ]] || [[ "$sts_cor" = "01" ]]; then
					cor_sts='blue'
				elif [[ "$sts_cor" = "2" ]] || [[ "$sts_cor" = "02" ]]; then
					cor_sts='green'
				elif [[ "$sts_cor" = "3" ]] || [[ "$sts_cor" = "03" ]]; then
					cor_sts='red'
				elif [[ "$sts_cor" = "4" ]] || [[ "$sts_cor" = "04" ]]; then
					cor_sts='yellow'
				elif [[ "$sts_cor" = "5" ]] || [[ "$sts_cor" = "05" ]]; then
					cor_sts='#F535AA'
				elif [[ "$sts_cor" = "6" ]] || [[ "$sts_cor" = "06" ]]; then
					cor_sts='cyan'
				elif [[ "$sts_cor" = "7" ]] || [[ "$sts_cor" = "07" ]]; then
					cor_sts='#FF7F00'
				elif [[ "$sts_cor" = "8" ]] || [[ "$sts_cor" = "08" ]]; then
					cor_sts='#9932CD'
				elif [[ "$sts_cor" = "9" ]] || [[ "$sts_cor" = "09" ]]; then
					cor_sts='black'
				elif [[ "$sts_cor" = "10" ]]; then
					cor_sts='null'
				else
					echo -e "\n${cortxt}OPCAO INVALIDA !"
					cor_sts='null'
				fi
				fun_msgsocks() {
					msgsocks2=$(cat /etc/SSHPlus/wsproxy.py | grep "MSG =" | awk -F = '{print $2}')
					sed -i "s/$msgsocks2/ '$msgg'/g" /etc/SSHPlus/wsproxy.py
					sleep 1
					cor_old=$(grep 'color=' /etc/SSHPlus/wsproxy.py | cut -d '"' -f2)
					sed -i "s/\b$cor_old\b/$cor_sts/g" /etc/SSHPlus/wsproxy.py
				}
				echo ""
				echo -e "${cor3}ALTERANDO STATUS!"
				echo ""
				fun_bar 'fun_msgsocks'
                restartwssocks() {
                    if ps x | grep wsproxy.py | grep -v grep 1>/dev/null 2>/dev/null; then
						echo -e "$(netstat -nplt | grep 'python' | awk {'print $4'} | cut -d: -f2 | xargs)" >/tmp/Pt_wssks
						for pidproxy in $(screen -ls | grep ".ws" | awk {'print $1'}); do
							screen -r -S "$pidproxy" -X quit
						done
						screen -wipe >/dev/null
						_Ptwssks="$(cat /tmp/Pt_wssks)"
						sleep 1
						screen -dmS ws python /etc/SSHPlus/wsproxy.py $_Ptwssks
						rm /tmp/Pt_wssks
					fi
				}
				echo ""
				echo -e "${cor3}REINICIANDO WEBSOCKET PHYTON!"
				echo ""
				fun_bar 'restartwssocks'
				echo ""
				echo -e "${cor3}STATUS ALTERADO COM SUCESSO!"
				sleep 2
				fun_socks
			else
				clear
				echo -e "${cor2}FUNCAO INDISPONIVEL\n\n${cortxt}ATIVE O WEBSOCKET PHYTON PRIMEIRO !${cortxt}"
				sleep 2
				fun_socks
			fi
		elif [[ "$resposta" = '0' ]]; then
			echo ""
			echo -e "${cor2}Retornando...${scor}"
			sleep 1
			fun_conexao
		else
			echo ""
			echo -e "${cor2}Opcao invalida !${scor}"
			sleep 1
			fun_socks
		fi

	}

	fun_openssh() {
		clear
		echo -e "${corbar2}            OPENSSH             ${scor}\n"
		echo -e "${cor2}[${cor4}1${cor2}] ${cor1}◉ ${cortxt}ADICIONAR PORTA${cor2}
[${cor4}2${cor2}] ${cor1}◉ ${cortxt}REMOVER PORTA${cor2}
[${cor4}3${cor2}] ${cor1}◉ ${cortxt}VOLTAR${scor}"
		echo ""
		echo -ne "${cor3}OQUE DESEJA FAZER ${cortxt}?${cor1} "
		read resp
		if [[ "$resp" = '1' ]]; then
			clear
			echo -e "${corbar2}         ADICIONAR PORTA AO SSH         ${scor}\n"
			echo -ne "${cor3}QUAL PORTA DESEJA ADICIONAR ${cortxt}?${cor1} "
			read pt
			[[ -z "$pt" ]] && {
				echo -e "\n${cor2}Porta invalida!"
				sleep 3
				fun_conexao
			}
			verif_ptrs $pt
			echo -e "\n${cor3}ADICIONANDO PORTA AO SSH${scor}"
			echo ""
			fun_addpssh() {
				echo "Port $pt" >>/etc/ssh/sshd_config
				service ssh restart
			}
			fun_bar 'fun_addpssh'
			echo -e "\n${cor3}PORTA ADICIONADA COM SUCESSO${scor}"
			sleep 3
			fun_conexao
		elif [[ "$resp" = '2' ]]; then
			clear
			echo -e "${corbar1}         REMOVER PORTA DO SSH         ${scor}"
			echo -e "\n${cortxt}[${cor2}!${cortxt}] ${cor3}PORTA PADRAO ${cor1}22 ${cortxt}CUIDADO !${scor}"
			echo -e "\n${cortxt}PORTAS EM USO: ${cor1}$(grep 'Port' /etc/ssh/sshd_config | cut -d' ' -f2 | grep -v 'no' | xargs)\n"
			echo -ne "${cor3}QUAL PORTA DESEJA REMOVER ${cortxt}?${cor1} "
			read pt
			[[ -z "$pt" ]] && {
				echo -e "\n${cor2}Porta invalida!"
				sleep 2
				fun_conexao
			}
			[[ $(grep -wc "$pt" '/etc/ssh/sshd_config') != '0' ]] && {
				echo -e "\n${cor3}REMOVENDO PORTA DO SSH${scor}"
				echo ""
				fun_delpssh() {
					sed -i "/Port $pt/d" /etc/ssh/sshd_config
					service ssh restart
				}
				fun_bar 'fun_delpssh'
				echo -e "\n${cor3}PORTA REMOVIDA COM SUCESSO${scor}"
				sleep 2
				fun_conexao
			} || {
				echo -e "\n${cor2}Porta invalida!"
				sleep 2
				fun_conexao
			}
		elif [[ "$resp" = '3' ]]; then
			echo -e "\n${cor2}Retornando.."
			sleep 2
			fun_conexao
		else
			echo -e "\n${cor2}Opcao invalida!"
			sleep 2
			fun_conexao
		fi
	}

	fun_sslh() {
		[[ "$(netstat -nltp | grep 'sslh' | wc -l)" = '0' ]] && {
			clear
			echo -e "${corbar2}             INSTALADOR SSLH               ${scor}\n"
			echo -e "\n${cortxt}VC ESTA PRESTES A INSTALAR SSLH !${scor}\n"
			echo -ne "${cor3}DESEJA CONTINUAR ${cor2}? ${cortxt}[s/n]:${cor1} "
			read resposta
			[[ "$resposta" = 's' ]] && {
				echo -e "\n${cortxt}DEFINA UMA PORTA PARA SSLH !${scor}\n"
				echo -ne "${cor3}QUAL A PORTA ${cortxt}?${cor1} "
				read porta
				[[ -z "$porta" ]] && {
					echo -e "\n${cor2}Porta invalida!"
					sleep 3
					clear
					fun_conexao
				}
				verif_ptrs $porta
				echo -e "\n${cor3}INSTALANDO SSLH !${scor}"
				echo ""
				fun_instsslh() {
					[[ -e "/etc/stunnel/stunnel.conf" ]] && ptssl="$(netstat -nplt | grep 'stunnel' | awk {'print $4'} | cut -d: -f2 | xargs)" || ptssl='3128'
					[[ -e "/etc/openvpn/server.conf" ]] && ptvpn="$(netstat -nplt | grep 'openvpn' | awk {'print $4'} | cut -d: -f2 | xargs)" || ptvpn='1194'
					DEBIAN_FRONTEND=noninteractive apt-get -y install sslh
					echo -e "#Modo autónomo\n\nRUN=yes\n\nDAEMON=/usr/sbin/sslh\n\nDAEMON_OPTS='--user sslh --listen 0.0.0.0:$porta --ssh 127.0.0.1:22 --ssl 127.0.0.1:$ptssl --http 127.0.0.1:80 --openvpn 127.0.0.1:$ptvpn --pidfile /var/run/sslh/sslh.pid'" >/etc/default/sslh
					/etc/init.d/sslh start && service sslh start
				}
				echo ""
				fun_bar 'fun_instsslh'
				echo -e "\n${cor3}INICIANDO O SSLH !${scor}\n"
				fun_bar '/etc/init.d/sslh restart && service sslh restart'
				[[ $(netstat -nplt | grep -w 'sslh' | wc -l) != '0' ]] && echo -e "\n${cor3}INSTALADO COM SUCESSO !${scor}" || echo -e "\n${cor2}ERRO INESPERADO !${scor}"
				sleep 3
				fun_conexao
			} || {
				echo -e "\n${cor2}Retornando..."
				sleep 2
				fun_conexao
			}
		} || {
			clear
			echo -e "${corbar2}             REMOVER O SSLH               ${scor}\n"
			echo -ne "${cor3}REALMENTE DESEJA REMOVER O SSLH ${cor2}? ${cortxt}[s/n]:${cor1} "
			read respo
			[[ "$respo" = "s" ]] && {
				fun_delsslh() {
					/etc/init.d/sslh stop && service sslh stop
					apt-get remove sslh -y
					apt-get purge sslh -y
				}
				echo -e "\n${cor3}REMOVENDO O SSLH !${scor}\n"
				fun_bar 'fun_delsslh'
				echo -e "\n${cor3}REMOVIDO COM SUCESSO !${scor}\n"
				sleep 2
				fun_conexao
			} || {
				echo -e "\n${cor2}Retornando..."
				sleep 2
				fun_conexao
			}
		}
	}

	x="ok"
	fun_conexao() {
		while true $x != "ok"; do
			clear
			    
				echo -e "${corbar2}            🌐    MODO DE CONEXAO    🌐          ${scor}\n"
				echo -e "\033[0;34m══════════════════════════════════════════════════${scor}"
			echo -e "${cor3}SERVICO: ${cortxt}OPENSSH ${cor3}PORTA: ${cor1}$(grep 'Port' /etc/ssh/sshd_config | cut -d' ' -f2 | grep -v 'no' | xargs)" && sts6="${cor3}ON "
			[[ "$(netstat -tlpn | grep 'docker' | wc -l)" != '0' ]] && {
				echo -e "${cor3}SERVICO: ${cortxt}CHISEL: ${cor3}PORTA: ${cor1}$(netstat -nplt | grep 'docker' | awk {'print $4'} | cut -d: -f2 | xargs)"
				sts8="${cor3}ON "
			} || {
				sts8="${cor2}OFF "
			}            
			[[ "$(netstat -tlpn | grep 'sslh' | wc -l)" != '0' ]] && {
				echo -e "${cor3}SERVICO: ${cortxt}SSLH: ${cor3}PORTA: ${cor1}$(netstat -nplt | grep 'sslh' | awk {'print $4'} | cut -d: -f2 | xargs)"
				sts7="${cor3}ON "
			} || {
				sts7="${cor2}OFF "
			}

			[[ "$(netstat -tlpn | grep 'openvpn' | wc -l)" != '0' ]] && {
				echo -e "${cor3}SERVICO: ${cortxt}OPENVPN: ${cor3}PORTA: ${cor1}$(netstat -nplt | grep 'openvpn' | awk {'print $4'} | cut -d: -f2 | xargs)"
				sts5="${cor3}ON "
			} || {
				sts5="${cor2}OFF "
			}

			[[ "$(netstat -tlpn | grep 'python' | wc -l)" != '0' ]] && {
				echo -e "${cor3}SERVICO: ${cortxt}PROXY SOCKS ${cor3}PORTA: ${cor1}$(netstat -nplt | grep 'python' | awk {'print $4'} | cut -d: -f2 | xargs)"
				sts4="${cor3}ON "
			} || {
				sts4="${cor2}OFF "
			}
			[[ -e "/etc/stunnel/stunnel.conf" ]] && {
				echo -e "${cor3}SERVICO: ${cortxt}SSL TUNNEL ${cor3}PORTA: ${cor1}$(netstat -nplt | grep 'stunnel' | awk {'print $4'} | cut -d: -f2 | xargs)"
				sts3="${cor3}ON "
			} || {
				sts3="${cor2}OFF "
			}
			[[ "$(netstat -tlpn | grep 'dropbear' | wc -l)" != '0' ]] && {
				echo -e "${cor3}SERVICO: ${cortxt}DROPBEAR ${cor3}PORTA: ${cor1}$(netstat -nplt | grep 'dropbear' | awk -F ":" {'print $4'} | xargs)"
				sts2="${cor3}ON "
			} || {
				sts2="${cor2}OFF "
			}
			[[ "$(netstat -tlpn | grep 'squid' | wc -l)" != '0' ]] && {
				echo -e "${cor3}SERVICO: ${cortxt}SQUID ${cor3}PORTA: ${cor1}$(netstat -nplt | grep 'squid' | awk -F ":" {'print $4'} | xargs)"
				sts1="${cor3}ON "
			} || {
				sts1="${cor2}OFF "
			}
			xv2ray=`if netstat -tunlp |grep v2ray 1> /dev/null 2> /dev/null; then
			echo -e "${cor3}ON "
			else
			echo -e "${cor2}OFF "
			fi`;          
			echo -e "\033[0;34m══════════════════════════════════════════════════${scor}"
			echo ""
			echo -e "${cor2}[${cor4}01${cor2}] ${cor5}◉ ${cortxt}OPENSSH $sts6${cor2}
[${cor4}02${cor2}] ${cor5}◉ ${cortxt}SQUID PROXY $sts1${cor2}
[${cor4}03${cor2}] ${cor5}◉ ${cortxt}DROPBEAR $sts2${cor2}
[${cor4}04${cor2}] ${cor5}◉ ${cortxt}OPENVPN $sts5${cor2}
[${cor4}05${cor2}] ${cor5}◉ ${cortxt}PROXY SOCKS $sts4${cor2}
[${cor4}06${cor2}] ${cor5}◉ ${cortxt}SSL TUNNEL $sts3${cor2}
[${cor4}07${cor2}] ${cor5}◉ ${cortxt}SSLH MULTIPLEX $sts7${cor2}
[${cor4}00${cor2}] ${cor5}◉ ${cortxt}VOLTAR ${cor3}<${cortxt}<${cor2}< ${cor2}"
			echo ""
			echo -e "\033[0;34m══════════════════════════════════════════════════${scor}"
			echo ""
			tput civis
			echo -ne "${cor3}OQUE DESEJA FAZER ${cortxt}?${cor2}?${cor1} "
			read x
			tput cnorm
			clear
			case $x in
			1 | 01)
				fun_openssh
				;;
			2 | 02)
				fun_squid
				;;
			3 | 03)
				fun_drop
				;;
			4 | 04)
				fun_openvpn
				;;
			5 | 05)
				fun_socks
				;;
			6 | 06)
				inst_ssl
				;;
			7 | 07)
				fun_sslh
				;;                          	
			0 | 00)
				echo -e "${cor2}Voltando ao MENU...${scor}"
				sleep 1
				clear
				menu;
				;;
			*)
				echo -e "${cor2}Opcao invalida !${scor}"
				sleep 2
				;;
			esac
		done
	}
	fun_conexao
}
